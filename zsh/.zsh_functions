#---------------------------------------------------------------------------------------------------
# Functions
#---------------------------------------------------------------------------------------------------

#bw session set
bwss(){
    eval $(bw unlock | grep export | awk -F"\$" {'print $2'})
}

# bw delete item
bwdd(){
    bw delete item $(bw get item $1 | jq .id | tr -d '"')
}

# set environment from the notes in item
bwe(){
    eval $(bw get item $1 | jq -r '.notes')
}

# Create bw secret note out of an existing .env file
bwc(){
    DEFAULT_FF=".env"
    FF=${2:-$DEFAULT_FF}
    #cat ${FF} | awk '{printf "%s\\n", $0}' |  sed 's/"/\\"/g' >/tmp/.env
    cat ${FF} | awk '{print "export " $0}' >/tmp/.xenv
    bw get template item | jq --arg a "$(cat /tmp/.xenv)" --arg b "$1" '.type = 2 | .secureNote.type = 0 | .notes = $a | .name = $b' | bw encode | bw create item
    rm /tmp/.xenv
}

# Create a bw secret note from an existing terminal session
bwce(){
    export | awk '{print "export " $0}' >/tmp/.env
    bw get template item | jq --arg a "$(cat /tmp/.env)" --arg b "$1" '.type = 2 | .secureNote.type = 0 | .notes = $a | .name = $b' | bw encode | bw create item
    rm /tmp/.env
}

## Netstat to list all listening ports
macnst (){
    netstat -Watnlv | grep LISTEN | awk '{"ps -o comm= -p " $9 | getline procname;colred="\033[01;31m";colclr="\033[0m"; print colred "proto: " colclr $1 colred " | addr.port: " colclr $4 colred " | pid: " colclr $9 colred " | name: " colclr procname;  }' | column -t -s "|"
}

hey() {
    if [[ $1 == "setup" &&  $# -eq 1 ]];
    then
        history | cut -c 8- > ~/.hist.txt
        HISTFILE=~/.hist.txt
        curl \
        -F "userid=1" \
        -F "filecomment=This is the command history file" \
        -F "histfile=@$HISTFILE" \
        https://api.heycli.com/uploader
        return
    fi
    
    str="$*"
    current_dir="$(pwd)"
    curl \
    -F "command=$str" \
    -H "Authorization:$HEYCLI_API_KEY" \
    -F "curr_dir=$current_dir" \
    https://api.heycli.com//heycli
}


## Unset all ARM
uaz(){
    unset ARM_CLIENT_ID
    unset ARM_CLIENT_SECRET
    unset ARM_SUBSCRIPTION_ID
    unset ARM_TENANT_ID
}

# Extract any archive
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Git commit with timestamp
gct() {
    git add -A && git commit -m "$1 [$(date +%Y-%m-%d\ %H:%M:%S)]"
}

# Find process by name
psgrep() {
    ps aux | grep -i "$1" | grep -v grep
}

# Kill process by name
pskill() {
    local pid=$(ps -e | grep -i "$1" | grep -v grep | awk '{print $1}')
    if [ -z "$pid" ]; then
        echo "No process found matching: $1"
    else
        echo "Killing process: $1 (PID: $pid)"
        kill -9 $pid
    fi
}

# Quick backup
backup() {
    cp -r "$1" "$1.backup.$(date +%Y%m%d_%H%M%S)"
}

# Show file/folder size
sizeof() {
    du -sh "$@"
}

# Quick note taking
note() {
    local notes_dir="$HOME/notes"
    mkdir -p "$notes_dir"
    
    if [ $# -eq 0 ]; then
        ls -la "$notes_dir"
    else
        echo "$(date '+%Y-%m-%d %H:%M:%S'): $*" >> "$notes_dir/$(date +%Y-%m-%d).md"
        echo "Note saved to $notes_dir/$(date +%Y-%m-%d).md"
    fi
}

# Weather
weather() {
    curl -s "wttr.in/${1:-}"
}

# Cheatsheet
cheat() {
    curl -s "cht.sh/$1"
}
